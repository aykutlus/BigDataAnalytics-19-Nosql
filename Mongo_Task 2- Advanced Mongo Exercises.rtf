{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh16580\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 #1) Obtain restaurants in "Queens"\
\
var pipeline = [\
\
    \{ $match : \{"borough": "Queens"\} \} \
];\
\
db.restaurants.aggregate(pipeline).pretty();\
\
\
#2) Obtain restaurants outside "Queens"\
\
var pipeline = [\
\
    \{ $match :\
	\{"borough":\{ $ne : "Queens"\} \} \} \
];\
\
db.restaurants.aggregate(pipeline).pretty();\
\
\
#3) Obtain only the restaurant name and cuisine\
\
var pipeline = [\
\
    \{ $project : \{"name":1,"cuisine":1,"_id":0 \} \}\
];\
\
db.restaurants.aggregate(pipeline).pretty();\
\
\
#4) Obtain only the restaurant name and cuisine for those in "Queens"\
\
var pipeline = [\
	\
	\{ $match : \{"borough": "Queens"\} \} ,\
\
    \{ $project : \{"name":1,"cuisine":1,"_id":0 \} \}\
]; \
\
db.restaurants.aggregate(pipeline).pretty();\
\
\
#5) Find the number of restaurants in each borough     \
\
var pipeline = [\
	\
	\{ $group : \{ "_id": "$borough" , "numResBor" : \{"$sum":1 \} \} \}\
]\
\
db.restaurants.aggregate(pipeline).pretty();\
\
\
# 6) Find the restaurants in the borough "Queens" and with cuisine "Brazilian", and get the number of restaurants for each zipcode in this borough\
\
var pipeline = [\
	\
	\{ $match : \{$and: [ \{"borough":"Queens"\},\{"cuisine":"Brazilian"\} ] \} \} ,\
	\
	\{ $group : \{ "_id": "$address.zipcode" , "numResZip" : \{"$sum":1   \} \} \}\
]\
\
db.restaurants.aggregate(pipeline).pretty();\
\
\
# 7) Obtain the average score for restaurants in each borough ????\
\
\
db.restaurants.aggregate([\{$project :\{"name" :1,"_id":0, "borough":1 , "avgScr": \{$avg:"$grades.score" \} \} \},\
						\{ $group : \{_id: "$borough" ,"avgBor": \{ $avg : "$avgScr"\} \} \} ] ).pretty()\
\
\
# 8) Obtain the average score for restaurants in each borough ordered by this average descending??\
 \
db.restaurants.aggregate([\{$project :\{"name" :1,"_id":0, "borough":1 , "avgScr": \{$avg:"$grades.score" \} \} \},\{ $group : \{_id: "$borough" ,"avgBor": \{ $avg : "$avgScr"\} \} \}, \{ $sort:\{"avgBor" : -1\} \} ]).pretty()\
\
\
# 9) Propose and resolve 5 queries using $unwind, $lookup, $limit, $skip and $count\
\
#==> Find the zipcode with the most restaurants and the number of its restaurants using the $unwind method (UNWIND)\
\
db.restaurants.aggregate( [ \{ $unwind: "$address"\},\{ $group: \{_id: "$address.zipcode", "number_of_restaurants": \{$sum:1 \} \} \},\
\{$sort :\{"number_of_restaurants" : -1 \}\},\{$limit:1\}])\
\
\
#==> Count the restaurants outside "Queens" (COUNT)\
\
var pipeline = [\
\
    \{ $match :\
	\{"borough":\{ $ne : "Queens"\} \} \},\{$count: "res_out"\} \
]							\
												\
db.restaurants.aggregate(pipeline).pretty();\
\
			\
#==> Get the first 5 restaurants name after sorting their names in descending order. (LIMIT)\
												\
db.restaurants.aggregate([\{ $project : \{ "name":1 , "_id":0 \} \},\{$sort:\{"name":-1 \}\},\{$limit:5\}])\
\
	\
#==> Get the 5 restaurants name which are in Bronx,skip first 100 ones and sort them in ascending order. (SKIP)					\
db.restaurants.aggregate([ \{ $match : \{"borough":"Bronx" \} \} , \{ $project : \{ "name":1 , "_id":0 \} \},\{$sort:\{"name":1 \}\},\{$limit:105\},\{$skip:100\}])\
					\
\
#==> Find the restaurants which have founders.(Founders are in another collection)\
\
PS:In zip folder, there is a file its name is founder_restaurants.json.$lookup is done based on this file. (LOOKUP)\
							\
db.restaurants.aggregate([\
    \{ $lookup:\
        \{\
           from: "founders",\
           localField: "restaurant_id",\
           foreignField: "restaurant_id_f",\
           as: "founder"\
        \}\
    \},\{$match: \{"founder" : \{$ne:[ ] \}\}\}\
	\
]).pretty()						\
\
PS: After lookup, founder coloumn has been added to the restaurants who have founders ,yet the ones dont have any founders filled [ ] as default, which is the reason its done $ne : [ ] in $match part. Screenshot of query has been added to zip folder. 			\
							\
							\
							\
							\
							\
							\
							\
							\
\
}
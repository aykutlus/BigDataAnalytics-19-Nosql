{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh16580\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 # 1. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant. \
\
db.restaurants.find( \{\}, \{ "restaurant_id":1, "name":1, "borough":1, "address.zipcode":1,  "_id":0 \} ).pretty() ;\
\
count:25359\
\
# 2. Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx. \
\
db.restaurants.find(\{"borough":"Bronx"\}).skip(5).limit(5).pretty();\
\
count:5\
\
# 3. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100. \
\
db.restaurants.find( \{ grades: \{ $elemMatch : \{ "score": \{ $gt: 80, $lt: 100 \} \} \} \} ).pretty(); \
\
count:11\
\
# 4. Write a MongoDB query to find the restaurants that does not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.  \
\
db.restaurants.find( \{ $and : [ \{ "cuisine" :  \{ $ne :  "American" \} \},\{"grades.score": \{ $gt:70\} \},\
\{"address.coord": \{ $lt : -65.754168 \} \} ] \} ).pretty(); \
\
count:26\
\
# 5. Write a MongoDB query to find the restaurants which does not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order. \
\
db.restaurants.find( \{ "cuisine" : \{$ne : "American"\},"grades.grade" : "A","borough":\{$ne: "Brooklyn"\} \} ).sort( \{ "cuisine" : -1 \} ).pretty(); \
\
count:13095\
\
# 6. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contains 'Wil' as first three letters for its name. \
\
db.restaurants.find( \{ "name" : /^Wil/\}, \{ "restaurant_id" :1 ,"name" :1 ,"borough" : 1,"cuisine":1 \}) ;\
\
count:31\
\
# 7. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contains 'ces' as last three letters for its name. \
\
db.restaurants.find( \{ "name" : \{$regex : /ces$/ \} \}, \{ "restaurant_id" :1 ,"name" :1 ,"borough" : 1,"cuisine":1 \}) ;\
\
count:45\
\
# 8. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contains 'Reg' as three letters somewhere in its name. \
\
db.restaurants.find( \{ "name" : \{$regex : "Reg" \} \} , \{ "restaurant_id" :1 ,"name" :1 ,"borough" : 1,"cuisine":1 \}).pretty() ; \
\
count:31\
\
# 9. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belongs to the borough Staten Island or Queens or Bronx or Brooklyn. \
\
db.restaurants.find( \{ "borough" : \{ $in :[ "Staten Island", "Queens", "Bronx", "Brooklyn" ] \} \} , \{"restaurant_id" : 1, "name":1,"borough":1,"cuisine" :1\} );\
count:15049\
\
# 10. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinese' or restaurant's name begins with letter 'Wil'. \
\
db.restaurants.find(\{$or: [\{name: /^Wil/\},\{"$and": [\{"cuisine" : \{$ne :"American"\}\}, \{"cuisine" : \{$ne :"Chinese"\}\} ]\}\
]\},\{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1\});\
\
count:16768\
\
# 11. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z". \
\
 db.restaurants.find(\{"grades.1.date":ISODate("2014-08-11T00:00:00Z"),"grades.1.grade":"A","grades.1.score" :9\},\{"restaurant_id":1, "name":1, "grades":1, "_id":0\}).pretty();\
\
count:4\
	\
#12. Write a MongoDB query to arrange the name of the cuisine in ascending order and for those same cuisine borough should be in descending order. \
\
db.restaurants.find(\{\},\{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1\}).sort(\{"cuisine":1\},\{"cuisine" :-1\}).pretty()\
\
count:25359\
\
\
\
\
}